#!/bin/bash

clustername=$1
environment=$2

usage() {
  echo
  echo "Performs an number of basic steps to configure a k8s cluster.

usage: install <clustername> <environment>

    "
  exit 1
}

die() {
  msg=$*
  [ -z "$msg" ] && msg="we ran into an issue - please polish the mirror"
  echo error: $msg
  exit 99
}

checkForSecret() {
  sekret=$1
  ns=$2
  echo checking for existence of secret $sekret
  $dcr kubectl get secret -n $ns $sekret
  rc=$?
  [[ $rc -eq 0 ]] && echo we have a secret!
  return $rc
}

mkGrafanaSecret() {

  sekret=`openssl rand -base64 32`
  echo creating secret grafana-secret
  $dcr kubectl create secret generic grafana-secret -n kube-system --from-literal=grafana-admin-password=${sekret} --from-literal=grafana-admin-user=admin
  rc=$?
  [[ $rc -eq 0 ]] && echo we now have a grafana secret!
  return $rc

}

mkAlertManagerSecret() {

  echo creating secret alertmanager-secret
  [ -z "$SLACK_API_URL" -o -z "$VICTOROPS_API_KEY" ] && die "please set env vars SLACK_API_URL and VICTOROPS_API_KEY for alertmanager"
  $dcr kubectl create secret generic alertmanager-secret -n kube-system \
    --from-literal=SLACK_API_URL=${SLACK_API_URL} \
    --from-literal=VICTOROPS_API_KEY=${VICTOROPS_API_KEY}
  rc=$?
  [[ $rc -eq 0 ]] && echo we now have an alertmanager secret!
  return $rc

}

# off we go...
[[ -z "${clustername}" ]] && usage
[[ -z "${environment}" ]] && usage

context=`kubectl config current-context`
if [ "${context}" != "${clustername}-${environment}" ]
then
    echo "invalid cluster name provided: $clustername"
    echo "need: ${context}"
    exit 1
fi

if [ ! -f build/tls/${clustername}-${environment}.crt -o ! -f build/tls/${clustername}-${environment}.key ]
then
  echo "gimme some certificate files for the traefik ingress controller: build/tls/${clustername}-${environment}.crt, build/tls/${clustername}-${environment}.key"
  exit 1
fi

echo
echo label all nodes as workers
kubectl get node -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'|while read NODE_NAME
do
  
  case $NODE_NAME in
    *master*)
      echo label node $NODE_NAME as master
      echo kubectl label node "role=master" -l "kubernetes.io/hostname=${NODE_NAME}" --overwrite=true
      kubectl label node "role=master" -l "kubernetes.io/hostname=${NODE_NAME}" --overwrite=true
      ;;
    *)
      echo label node $NODE_NAME as worker
      echo kubectl label node "role=worker" -l "kubernetes.io/hostname=${NODE_NAME}" --overwrite=true
      kubectl label node "role=worker" -l "kubernetes.io/hostname=${NODE_NAME}" --overwrite=true
      kubectl label node ${NODE_NAME} node-role.kubernetes.io/node="" --overwrite=true
      ;;
  esac

done

echo
echo storage classes
kubectl apply -f yaml/storage-class-thick.yaml
kubectl apply -f yaml/storage-class-thin.yaml
echo set default StorageClass to thin
kubectl patch storageclass thin --patch '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

echo
echo traefik
checkForSecret traefik-${clustername}-tls kube-system || kubectl create secret tls traefik-${clustername}-tls --cert=build/tls/${clustername}-${environment}.crt --key=build/tls/${clustername}-${environment}.key -n kube-system
gomplate -f yaml/traefik.yaml -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
kubectl rollout status ds/traefik-ingress-controller -n kube-system

echo
echo helm for default namespace
cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: default

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: tiller-default
subjects:
- kind: ServiceAccount
  name: tiller
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
EOF

helm init --upgrade --tiller-namespace default --service-account tiller

echo 
echo additional namespaces
kubectl create ns auth
kubectl create ns logging

echo 
echo dex
checkForSecret traefik-${clustername}-tls auth || kubectl create secret tls traefik-${clustername}-tls --cert=build/tls/${clustername}-${environment}.crt --key=build/tls/${clustername}-${environment}.key -n auth
for f in ./yaml/dex/*.yml; do
  gomplate -f $f -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
done
kubectl rollout status deployment/dex -n auth

echo
echo deploy example kuard app 
for f in ./yaml/kuard/*.yaml; do
  gomplate -f $f -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
done

echo
echo dashboard-oidc
gomplate -f yaml/oidc-roles/template.yaml -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
checkForSecret kube-dashboard-session-secret kube-system
rc=$?
if [ $rc ]
then
  echo create kube-dashboard-session-secret
  SECRET=`openssl rand -base64 32`
  echo secret=${SECRET} > ./.tmp
  kubectl create secret generic kube-dashboard-session-secret -n kube-system --from-env-file=./.tmp
fi
for f in ./yaml/dashboard-oidc/*.yaml; do
  gomplate -f $f -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
  done
kubectl rollout status deployment/kubernetes-dashboard-oidc -n kube-system

echo
echo fluent-bit
checkForSecret fluent-bit-logging logging
rc=$?
echo rc: $rc
if [ $rc ]
then
  echo creating fluent-bit-logging secret
  echo '{{ $config := (datasource "config") }} kubectl create secret generic fluent-bit-logging -n logging --from-literal=token={{ $config.logging.splunkToken }}' | gomplate -d config=yaml/params-${clustername}-${environment}.yaml | source /dev/stdin
fi
for f in ./yaml/fluent-bit/*.yaml; do
  gomplate -f $f -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
done
kubectl rollout status ds/fluent-bit -n logging

echo
echo alertmanager
checkForSecret alertmanager-secret kube-system|| mkAlertManagerSecret
for f in ./yaml/alertmanager/*.yaml; do
  gomplate -f $f -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
done
kubectl rollout status deployment/prometheus-alertmanager -n kube-system

echo
echo prometheus
for f in ./yaml/prometheus/*.yaml; do
  gomplate -f $f -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
done
kubectl rollout status deployment/prometheus-server -n kube-system

echo
echo grafana
checkForSecret grafana-secret kube-system|| mkGrafanaSecret
for f in ./yaml/grafana/*.yaml; do
  gomplate -f $f -d config=yaml/params-${clustername}-${environment}.yaml | kubectl apply -f -
done
kubectl rollout status deployment/grafana -n kube-system

echo 
echo node-exporter
cat yaml/node-exporter/*.yaml|kubectl apply -f -

echo 
echo kube-state-metrics
cat yaml/kube-state-metrics/*.yaml|kubectl apply -f -
echo all done

echo
echo installing metrics-server for $clustername
cat yaml/metrics-server/*.yaml|kubectl apply -f -

echo
echo installing custom-metrics-server for $clustername
cat yaml/custom-metrics-api/*.yaml|kubectl apply -f -

